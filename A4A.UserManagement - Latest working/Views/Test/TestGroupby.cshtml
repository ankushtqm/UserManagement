
@{
    ViewBag.Title = "TestGroupby";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<link rel="stylesheet" type="text/css" href="http://lysik.pl/public/chosen.css">
<script type="text/javascript" src="http://lysik.pl/public/chosen.jquery.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.3.0/knockout-debug.js"></script>
<script src="~/Scripts/knockout.validation.js"></script>

    <style type="text/css">
        h2 {
            font-size: 1.2em;
            font-weight: bold;
        }
    </style>

    <title>KnockoutJS ObservableArray data grouping by rniemeyer</title> 
    <ul data-bind="foreach: people">
        <li>
            <input data-bind="value: name" />
            <select data-bind="options: $root.choices, value: type"></select>
            <a href="#" data-bind="click: $root.removePerson"> x </a>
        </li>
    </ul>
    <button data-bind="click: addPerson">Add Person</button>

    <hr />

    <ul data-bind="foreach: choices">
        <li>
            <h2 data-bind="text: $data"></h2>
            <ul data-bind="foreach: $root.people.index.type()[$data]">
                <li data-bind="text: name"></li>
            </ul>
            <hr />
        </li>
    </ul>






    <script type='text/javascript'>
//<![CDATA[

ko.observableArray.fn.distinct = function(prop) {
    var target = this;
    target.index = {};
    target.index[prop] = ko.observable({});

    ko.computed(function() {
        //rebuild index
        var propIndex = {};

        ko.utils.arrayForEach(target(), function(item) {
            var key = ko.utils.unwrapObservable(item[prop]);
            if (key) {
                propIndex[key] = propIndex[key] || [];
                propIndex[key].push(item);
            }
        });

        target.index[prop](propIndex);
    });

    return target;
};

var Person = function(name, type) {
   this.name = ko.observable(name);
   this.type = ko.observable(type);
}

var ViewModel = function() {
    var self = this;
    this.choices = ["Friend", "Enemy", "Other" ];
    this.people = ko.observableArray([
           new Person("Jimmy", "Friend"),
           new Person("George", "Friend"),
           new Person("Zippy", "Enemy")
    ]).distinct('type');

    this.addPerson = function() {
        self.people.push(new Person("new", "Other"));
    };

    this.removePerson = function(person) {
      self.people.remove(person);
    };
}; 

ko.applyBindings(new ViewModel()); 
//]]>

    </script>

   
